((2019/11/06)このファイルは、Logic Puzzle SolverをMSX-FAN誌に投稿した際に
添付した説明書きです。最低限の手直しをした以外は1995年5月当時のままです。)

--------------------------------------------------------------------------------

		Ｌｏｇｉｃ  Ｐｕｚｚｌｅ  Ｓｏｌｖｅｒ

◎内容
　今、世間に「ののぐらむ」「イラストロジック」「お絵描きロジック」「絵が出る
ロジックパズル」などの名前（後半２つはうろ覚えですが）で出回っている、あの有名な
パズルを解くプログラムです。当然、画面を見ながら人が解く……のではなく、ＭＳＸが
解くのです。（一部嘘を含む）

◎ファイル構成
　ＬＰＳ１ＤＭ．ＢＡＳ　……　データ入力用プログラム
　ＬＰＳ１　　．ＢＡＳ　……　メインプログラム

◎使い方
　まず、ＬＰＳ１ＤＭ．ＢＡＳを起動します。新しくデータをつくる時は１、既にある
データをロードする時は２を選んでください。
　先に２の場合から説明すると、ファイル名を入力してリターンを押すだけで、あとは
勝手にメインプログラムをロードします。

　次に、ここからが重要な、１の場合です。「Ｈｅｉｇｈｔ，Ｗｉｄｔｈ？」と聞いて
くるので、パズルの縦と横の大きさをコンマで区切って入力します。
　すると「Ｒｏｗ１　Ｄａｔａ：」と表示されます。ここで、上から１行目のデータを
入力するわけですが、数字は必ずコンマで区切ってください。その他の文字はセパレー
ターとして認識しません。
　そうして、最上行から最下行、最左列から最右列までのデータを次々に入力していき
ます。

　最後のデータまで終わると、今度は画面上方に「１：Ｃｈｅｃｋ／２：Ｆｉｘ／
３：Ｄａｔａ　Ｍａｋｅ」というメニューが出ます。
　１を選ぶと、入力したデータを１０行ずつ表示します。何かキーを押すごとに先へ進み
ます。
　２は、データの修正です。「Ｗｈｅｒｅ？」と聞いてくるので、どこの行／列を直すの
かを指定します。横の行の時は「Ｒｎ」（ｎは数字）、縦の列の時は「Ｃｎ」と指定し
ます。例えば、上から２行目なら「Ｒ２」、左から３列目なら「Ｃ３」となります。その
後は、初めにデータを入力したのと同じ方法で正しいデータを入れてください。終わる
と、次の行／列を聞いてくるので、他に直すところがあればその行／列を指定し、なけれ
ば何も指定しないでリターンを押してください。
　３は、入力されたデータを元にワークエリアの設定を行い、メインプログラムをロード
します。メニューの１と２で間違いがなくなるまで確認・修正をしてから、これを選んで
ください。（間違えたままでワークエリアの設定をしてしまうと、始めからやり直すはめ
になります。）

　次に、メインプログラムの説明に入ります。ここでは４つのメニューがあります。
	１：Ｓｏｌｖｅ
	２：Ｆｉｘ
	３：Ｓａｖｅ
	４：Ｌｏａｄ
　１はＭＳＸがパズルを解きます。スペースキーで中断できます。ただし、今処理して
いる行／列が終わってから止まるので、瞬時に中断というわけにはいきません。
　２は、人が解くためのモード（？）です。なぜかこういうものが存在します。カーソル
キーで上下左右に動き、スペースキーでキャラクタを置きます。ＧＲＡＰＨキーで、置く
キャラクタが切り替わります。ＥＳＣキーでメニューに戻ります。このモードは、存在は
しているものの、あまり使わない方が安全です。下手に荒し回ると、その後
「Ｓｏｌｖｅ」を選んだ時、いきなり暴走します。（といっても、勝手にリセットが
かかったりするわけではなく、しばらく黙り込んだ挙げ句にエラーでストップする程度
です。）また、マス目の横に数字が表示されればまだ良かったのですが、場所がないため
に何も表示していません。"一見"無駄とも思えるモードです。
　３はデータセーブです。解き始める前でも、解いている途中でも、解き終わった後でも
セーブできます。一応、その時の状態はすべて保存されます。（…と思う）
　４はデータロードです。確かデータ作成プログラムの方にもあったのでは？という疑問
も持ち上がるかも知れませんが、それなりに意味があります。あちらでは、ファイルの
一覧が表示されるのです。メインプログラムの方では、グラフィック画面上で動いている
ため、ただファイル名を入力することしかできません。その他の違いは……きっとどこか
にあるんじゃなかろうかと……
　それから、３と４では、ファイル名を入力しないでリターンを押せばキャンセルができ
ます。

◎注意
　実は、このプログラムはすべての問題が解けるわけではありません。理論的に、現在
これに使われているアルゴリズムでは解けないパターンが多数（！）あることが判明して
います。そのうちのいくつかのパターンについては、対処方法も考えたのですが、とてつ
もなく速度が遅く（既にとてつもなく遅いという説あり）なることと、
ＭＳＸ−ＢＡＳＩＣではかなり作るのが辛いこと、締切に間に合わなくなることなどから
断念しました。
　さらに、速度維持と手抜きのため、エラーチェックもまともにやってません。もともと
矛盾した問題を与えたり、Ｆｉｘモード（人が解くモード）で荒し回ったりすると、すぐ
に正常に動かなくなります。そういう時は、プログラムを止めて、新たにデータをロード
し直してください。このためにも、解き始める前に、セーブをしておいた方がいい
でしょう。
　さて、話は少し変わって、なぜＦｉｘモード（人為介入モード）などがあるのかという
ことですが、これはもはや言わずと知れた（と思われる）、「ＭＳＸが解けなくなって
困っている時に、助け舟を出すため」という、非常に情けない理由です。先に述べたよう
に、今より少しはレベルアップする方法も考えました（棄却したが）。しかし、それでも
完璧にどんな問題でも解けるとは限りません。やはり、どうしてもこのモードは必要なの
です！！（ああ情けなや…）
　また、Ｆｉｘモードにしておいて最初から最後まで自分で解いて楽しもう、というのも
やめた方がいいでしょう。紙の上で解く方がよっぽど楽だと思われます。

◎データ作成用プログラムの解説

	変数
　ＨＴ　パズルの縦の長さ	ＷＤ　パズルの横の長さ
　ＢＭ　１行／列内に入るブロックの個数の最大値
　Ｎ　　行／列の通し番号	ＭＸ　その行／列の長さ（＝ＷＤ又はＨＴ）
　Ｆ１　ブロックの位置の自由度（ブロックが存在できる位置の数）
　Ｉ　　ループ用		ＳＵ　その行／列内の黒マス数の合計
　ＡＤ! アドレスを示す汎用変数	ＡＡ! ＡＤ!の待避用
　ＤＴ$ 文字列入力用		ＣＭ　文字列内のコンマの位置
　ＦＬ$ ファイル名		Ｋ$ 　キー入力用
　Ａ１!,Ａ２!,Ａ３!,Ａ４! ワークエリアのアドレスを示す
　ＢＬ（ブロック番号，通し行／列番号）　ブロックの長さ
　ＮＢ（通し行／列番号）　ブロックの数

	プログラム
　1000ｰ1040　タイトル
　1050ｰ1070　初期設定
　1080ｰ1120　メニュー（新規／ロード）選択
　1130ｰ1940　新規データ作成
	1140ｰ1220　データ入力
	1230ｰ1290　メニュー（チェック／修正／データ作成）選択
	1300ｰ1380　データチェックの処理
	1390ｰ1480　データ修正の処理
	1490ｰ1940　ＶＲＡＭ上ワークエリアの設定
　1950ｰ2000　データロード
　2010ｰ2030　メインプログラムのロード
　2040ｰ2160　データ入力サブ
　2170ｰ2220　データ表示サブ
　2230ｰ2260　行／列番号表示サブ

◎メインプログラムの解説

	変数
　ＨＴ　パズルの縦の長さ	ＷＤ　パズルの横の長さ
　ＢＭ　１行／列内のブロックの個数の最大値（実際値）
　Ｎ　　行／列の通し番号（０〜ＨＴ＋ＷＤ−１）
　Ｃ　　停滞状態に入っている回数
　ＲＫ　パズルを解くアルゴリズムのランク（通常１）
　Ｍ　　行番号／列番号（１〜ＨＴ／１〜ＷＤ）
　ＭＸ　その行／列の長さ（＝ＷＤ又はＨＴ）
　ＭＹ　ＷＤ，ＨＴのうちＭＸでない方の値
　Ｆ１　ブロックの位置の自由度（ブロックが存在できる位置の数）
　ＮＢ　ブロックの数
　ＡＤ! 処理中の行／列用のワークの先頭アドレス
　ＢＬ（ブロック番号）　ブロックの長さ
　ＯＦ（ブロック番号）　ブロックが存在できる位置の左／上端
　ＦＡ! Ａ１!またはＡ２!が入る
　ＢＡ! Ａ２!またはＡ１!が入る（ＦＡ!でない方）
　Ｋ　　処理中のブロック番号
　Ｘ　　現在処理しているマスの、行／列内の位置
　Ｘ１（Ｋ）　ブロックＫに帰属する黒マスの位置（左／上端）
　Ｘ２（Ｋ）　　　　　〃　　　　　〃　　　　　（右／下端）
　ＯＦ　ブロックが置ける位置の限界
　Ｐ　　処理中のブロック用のワークの先頭からの変位
　Ｐ１（Ｋ）　Ｐの下限		Ｐ２（Ｋ）　Ｐの上限
　Ｄ　　パズルのフィールドの状態を読んだ値
　Ａ　　ある位置にブロックが置けるなら１、だめなら０
　ＰＰ　ある帰属未確定の黒マスを、含む可能性があるブロックの個数
　ＰＫ　　　　　〃　　　　　　　〃　　　　　　　〃　　　　　番号
　Ｆ　　マスの確定が起きれば１、なければ０
　ＦＦ　いま処理した行／列でマスの確定が起きていれば１、なければ０
　ＣＣ　確定したマスを数えるカウンタ
　Ｅ　　エラー／ブレイクフラグ
　Ａ１!,Ａ２!,Ａ３!,Ａ４! ワークエリアのアドレス
　ＳＴ　カーソルキー入力用
　ＬＢ　スペースキー入力用	ＲＢ　ＧＲＡＰＨキー入力用
　ＬＦ　スペースキー受付フラグ	ＲＦ　ＧＲＡＰＨキー受付フラグ
　ＶＸ（ＳＴ），ＶＹ（ＳＴ）　Ｘ／Ｙ増分テーブル

　Ｉ，Ｊ　　ループ用
　ＤＸ，ＤＹ　キャラクターを表示する座標
　ＤＤ　表示するキャラクター番号
　ＦＬ$ ファイル名		Ｋ$ 　汎用
　Ｓ$ 　スプライトパターン定義用

	ユーザー定義関数
　ＦＮＦＡ! 　パズルのフィールドのアドレス取得
　ＦＮＦ　　　ＶＰＥＥＫ（ＦＮＦＡ!）
　ＦＮＷＡ! 　ブロック毎のワークエリアのアドレス取得
　ＦＮＷ　　　ＶＰＥＥＫ（ＦＮＷＡ!）

	スプライト使用状況
　０　　Ｆｉｘモード時のカーソル（黒マス）
　１　　　　　〃　　　　〃　　　（未確定マス）
　２　　　　　〃　　　　〃　　　（点マス）

	プログラム
　1000ｰ1040　タイトル
　1050ｰ1060　ファンクションキー設定
　1070ｰ1380　初期化
　1390ｰ1490　メニュー選択
　1500ｰ1570　ファイルロード
　1580ｰ1630　ファイルセーブ
　1640ｰ1900　Ｆｉｘモード
　1910ｰ2070　メインルーチンに入る準備
　2080ｰ3060　メインルーチンＡ
	2090ｰ2240　諸変数設定／ブロック数＝０の時の処理
	2250ｰ2720　ブロックの位置確定
	　　　2260ｰ2400　処理中のブロックに帰属する黒マスのサーチ
	　　　2410ｰ2620　ブロックを置ける位置の両端を決定
	　　　2630ｰ2720　上で決定した両端の内部領域のチェック
	2730ｰ3000　マス目の確定
	　　　2740ｰ2770　処理の振り分け
	　　　2780ｰ2850　未確定→点マスへの確定
	　　　2860ｰ2900　未確定→黒マスへの確定
	　　　2910ｰ3000　帰属未確定ブロック→帰属確定ブロックにする
	3010ｰ3060　マスの確定があれば「ブロックの位置確定」へ戻る
			　　　 なければメインルーチンから抜ける
　3070ｰ3080　メインルーチンＢ（エラーを起こして戻る）
3090ｰ	サブルーチン
　3100ｰ3310　メイン画面セット
　3320ｰ3400　ファイル名入力
　3410ｰ3510　ＶＲＡＭを読んで変数に代入
　3520ｰ3580　ブロックが置けるかどうか調べる
　3590ｰ3650　点マスを置く処理
　3660ｰ3700　黒マスを置く処理
　3710ｰ3740　　　〃　　〃　　（裏になっているフィールドへ）
　3750ｰ3820　行き詰まった時の処理（エラーまたはパズルの完成）
　3830ｰ3840　スペースキーによる割り込み
　3850ｰ3900　エラー処理
　3910ｰ3930　キャラクターを画面に描く
　3940ｰ3960　処理中の行／列を示すマークを描く
　3970ｰ3990　　　　〃　　　　　〃　　　　消す
　4000ｰ4010　Ｘ／Ｙ増分テーブルのデータ
　4020ｰ4140　スプライトデータ

◎ＶＲＡＭ使用状況
　スクリーン５、スプライトサイズ１６×１６で、各ページの使用状況は次のとおり。
	ページ０　　　……　メイン画面（パズルが表示される）
	ページ１　　　……　メニュー画面（ただし、メイン画面表示中は、黒
	　　マスや点マスなどのキャラクターのバッファ）
	ページ２、３　……　ワークエリア
